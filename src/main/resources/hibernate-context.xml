<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
            ">

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${datasource.connection.driver_class}" />
		<property name="jdbcUrl" value="${datasource.connection.url}" />
		<property name="user" value="${datasource.connection.username}" />
		<property name="password" value="${datasource.connection.password}" />
		<property name="minPoolSize" value="${datasource.connection.minPoolSize}" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${datasource.connection.maxPoolSize}" />
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${datasource.connection.maxIdleTime}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${datasource.connection.acquireIncrement}" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements" value="${datasource.connection.maxStatements}" />
		<!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
		<property name="maxStatementsPerConnection"
			value="${datasource.connection.maxStatementsPerConnection}" />
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${datasource.connection.initialPoolSize}" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod"
			value="${datasource.connection.idleConnectionTestPeriod}" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts"
			value="${datasource.connection.acquireRetryAttempts}" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure"
			value="${datasource.connection.breakAfterAcquireFailure}" />
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout"
			value="${datasource.connection.testConnectionOnCheckout}" />
		<property name="checkoutTimeout" value="${datasource.connection.checkoutTimeout}" />
		<property name="testConnectionOnCheckin"
			value="${datasource.connection.testConnectionOnCheckin}" />
		<property name="automaticTestTable" value="${datasource.connection.automaticTestTable}" />
		<property name="acquireRetryDelay" value="${datasource.connection.acquireRetryDelay}" />
	</bean>

<!--             添加一条解释型标注  
            <property name="hibernate.use_sql_comments" value="false"/>  
            配置如何根据java模型生成数据库表结构,常用update,validate  
            <property name="hibernate.hbm2ddl.auto" value="update"/>  
          
            <property name="hibernate.cache.use_query_cache" value="true"/>  
            <property name="hibernate.cache.use_second_level_cache" value="true"/>  
            <property name="hibernate.cache.provider_class" value="org.hibernate.cache.EhCacheProvider"/>  
            <property name="hibernate.cache.region.factory_class" value="org.hibernate.cache.ehcache.EhCacheRegionFactory"/>  
            <property name="hibernate.cache.provider_configuration" value="classpath:ehcache.xml"/>   -->

	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />


	<!-- Declare a JPA entityManagerFactory -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="packagesToScan" value="com.tangzongyun.basesystem" />
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="${hibernate.showSql}" />
				<property name="generateDdl" value="true" />
			</bean>
		</property>
	</bean>

	<!-- Declare a transaction manager -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- Where to find repositories -->
	<jpa:repositories base-package="com.tangzongyun.basesystem.sys.repository" />
<!-- 	
	    <jpa:repositories base-package="com.jike.usermanage.repository"  
                      repository-impl-postfix="Impl"   
                      entity-manager-factory-ref="entityManagerFactory"   
                      transaction-manager-ref="transactionManager"/>  
	 -->
	 
	 <!-- 
	 事务配置参考文章
	 http://blog.csdn.net/wangyan199366/article/details/49902063# 
	 
	  -->
	
<!-- 	<tx:advice id="userAdvice" transaction-manager="transactionManager">    
        <tx:attributes>     
          <tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT" read-only="false" rollback-for="UserNotFoundException" timeout="-1"/>      
          <tx:method name="del*" propagation="REQUIRED"/>   
          <tx:method name="update*" propagation="REQUIRED"/>    
          <tx:method name="add*" propagation="REQUIRED"/>   
          <tx:method name="find*" propagation="REQUIRED"/>      
          <tx:method name="get*" propagation="REQUIRED"/>   
          <tx:method name="apply*" propagation="REQUIRED"/>     
        </tx:attributes>    
    </tx:advice>  
    <aop:config>    
        <aop:pointcut id="userServiceMethod" expression="execution(* com.javaniu.service.*.*(..))"/>    
        <aop:advisor pointcut-ref="userServiceMethod" advice-ref="userAdvice" />    
    </aop:config>  -->
    
    
    <!-- shiro start -->
    <!-- 自定义realm -->
    <bean id="myRealm" class="com.tangzongyun.basesystem.realm.MyRealm"/>
    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="myRealm"/>
    </bean>
    <!-- shiro过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- shiro的核心安全接口，属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 身份验证失败，则跳转到登录页面 -->
        <property name="loginUrl" value="/user/index"/>
        <!-- 权限验证失败，跳转到指定页面 -->
        <property name="unauthorizedUrl" value="/user/unauthorized"/>
        <!-- shiro连接约束配置，即过滤链的定义 -->
        <property name="filterChainDefinitions">
            <value>
                /user/login=anon
                /user/*=authc
                /user/form=roles[admin]
            </value>
        </property>
    </bean>
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- 开启shiro注解 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <!-- shiro end -->
    
    
    

</beans>